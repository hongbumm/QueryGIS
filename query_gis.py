# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QueryGIS
                                 A QGIS plugin
 Contorl GIS with ChatGPT
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-01-07
        git sha              : $Format:%H$
        copyright            : (C) 2025 by 3DLabs, Juseong Lee
        email                : juseonglee99@3dlabs.co.kr / ljsgalaxy246@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QTimer, QThread, pyqtSignal
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QLineEdit
from PyQt5.QtCore import QTimer, QThread, pyqtSignal, QVariant
from tempfile import gettempdir
import os
from qgis.utils import iface
from qgis.core import QgsApplication, QgsProject, QgsMapLayer, QgsRasterLayer
from openai import OpenAI
from .resources import *
from .dockwidget import Ui_DockWidget
import os.path

class OpenAIWorker(QThread):
    finished = pyqtSignal(str)
    error = pyqtSignal(str)
    def __init__(self, api_key, user_query):
        super().__init__()
        self.api_key = api_key
        self.user_query = user_query
    def run(self):
        ASSISTANT_ID = "asst_bkccSq0rhMUkeIHFwParQ1G7"
        try:
            client = OpenAI(api_key=self.api_key)
            thread = client.beta.threads.create(messages=[{"role": "user", "content": f"{self.user_query}"}])
            run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=ASSISTANT_ID)
            while run.status != "completed":
                run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            message_response = client.beta.threads.messages.list(thread_id=thread.id)
            messages = message_response.data
            latest_message = messages[0]
            response = latest_message.content[0].text.value
            if response.startswith("```python"):
                response = response[len("```python"):].strip()
            if response.endswith("```"):
                response = response[:-3].strip()
            self.finished.emit(response)
        except Exception as e:
            self.error.emit(str(e))

class QueryGIS:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.menu = self.tr(u'&QueryGIS')
        self.actions = []
        self.dockwidget = None
    def tr(self, message):
        return QCoreApplication.translate('QueryGIS', message)
    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True, add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        if status_tip is not None:
            action.setStatusTip(status_tip)
        if whats_this is not None:
            action.setWhatsThis(whats_this)
        if add_to_toolbar:
            self.iface.addToolBarIcon(action)
        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)
        self.actions.append(action)
        return action
    def initGui(self):
        icon_path = ':/plugins/query_gis/icon.png'
        self.add_action(icon_path, text=self.tr(u'QueryGIS'), callback=self.run, parent=self.iface.mainWindow())
    def unload(self):
        if self.dockwidget:
            self.iface.removeDockWidget(self.dockwidget)
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&QueryGIS'), action)
            self.iface.removeToolBarIcon(action)
    def run(self):
        if not self.dockwidget:
            self.dockwidget = QDockWidget("QueryGIS", self.iface.mainWindow())
            self.dockwidget.setObjectName("QueryGISDockWidget")
            self.ui = Ui_DockWidget()
            self.ui.setupUi(self.dockwidget)
            self.ui.line_apikey.setEchoMode(QLineEdit.Password)
            self.ui.btn_ask.clicked.connect(self.process_query)
            self.ui.btn_run.clicked.connect(self.run_response)
            self.ui.chk_ask_run.stateChanged.connect(self.toggle_ask_run)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
        self.dockwidget.show()
    def toggle_ask_run(self):
        if self.ui.chk_ask_run.isChecked():
            self.ui.btn_ask.setText("Ask and Run")
            self.ui.btn_run.setEnabled(False)
        else:
            self.ui.btn_ask.setText("Ask")
            self.ui.btn_run.setEnabled(True)
    def process_query(self):
        # 무한정 기다리는 이슈. 일단 해제
        # self.ui.btn_ask.setEnabled(False)
        api_key = self.ui.line_apikey.text().strip()
        project = QgsProject.instance()
        # 1. Project Info 확장
        project_info = {
            "title": project.title(),
            "fileName": project.fileName(),
            "layerCount": len(project.mapLayers()),
            "crs": project.crs().authid(),
            "distanceUnits": project.distanceUnits(),
            "areaUnits": project.areaUnits(),
            "homePath": project.homePath(),
        }

        # 2. Layers Info 확장
        layers_info = []
        for layer_id, layer in project.mapLayers().items():
            layer_info = {
                "name": layer.name(),
                "id": layer_id,
                "type": layer.type(),
                "crs": layer.crs().authid(),
                "featureCount": layer.featureCount() if layer.type() == QgsMapLayer.VectorLayer else "N/A",
                "provider": layer.dataProvider().name(),
                "extent": layer.extent().toString(),
                "opacity": layer.opacity(), # 레이어 투명도
                "source": layer.source()  # 레이어 데이터 소스 (예: 파일 경로)
            }

            # 벡터 레이어 정보 추가
            if layer.type() == QgsMapLayer.VectorLayer:
                fields_info = []
                for field in layer.fields():
                    field_info = {
                        "name": field.name(),
                        "type": field.typeName()
                    }
                    fields_info.append(field_info)
                layer_info["fields"] = fields_info

                # 편집 모드 확인
                layer_info["isEditable"] = layer.isEditable()

                # 선택된 Feature 개수 확인
                layer_info["selectedFeatureCount"] = len(layer.selectedFeatures())

            # 래스터 레이어 정보 추가
            elif layer.type() == QgsMapLayer.RasterLayer:
                rlayer = QgsRasterLayer(layer.source(), layer.name(), layer.providerType())
                if rlayer.isValid():
                    layer_info["pixelSizeX"] = rlayer.rasterUnitsPerPixelX()
                    layer_info["pixelSizeY"] = rlayer.rasterUnitsPerPixelY()
                    layer_info["width"] = rlayer.width()  # 래스터 가로 픽셀 수
                    layer_info["height"] = rlayer.height() # 래스터 세로 픽셀 수
                    layer_info["bandCount"] = rlayer.bandCount() # 래스터 밴드 수

            layers_info.append(layer_info)

        # 3. Active Layer Info 확장 (위와 동일한 방식으로 확장)
        active_layer = iface.activeLayer()
        active_layer_info = None
        if active_layer:
            active_layer_info = {
                "name": active_layer.name(),
                "id": active_layer.id(), # 레이어 ID 추가
                "type": active_layer.type(),
                "crs": active_layer.crs().authid(),
                "featureCount": active_layer.featureCount() if active_layer.type() == QgsMapLayer.VectorLayer else "N/A",
                "provider": active_layer.dataProvider().name(),
                "extent": active_layer.extent().toString(),
                "opacity": active_layer.opacity(),
                "source": active_layer.source()
            }

            if active_layer.type() == QgsMapLayer.VectorLayer:
                fields_info = []
                for field in active_layer.fields():
                    field_info = {
                        "name": field.name(),
                        "type": field.typeName()
                    }
                    fields_info.append(field_info)
                active_layer_info["fields"] = fields_info
                active_layer_info["isEditable"] = active_layer.isEditable()
                active_layer_info["selectedFeatureCount"] = len(active_layer.selectedFeatures())

            elif active_layer.type() == QgsMapLayer.RasterLayer:
                rlayer = QgsRasterLayer(active_layer.source(), active_layer.name(), active_layer.providerType())
                if rlayer.isValid():
                    active_layer_info["pixelSizeX"] = rlayer.rasterUnitsPerPixelX()
                    active_layer_info["pixelSizeY"] = rlayer.rasterUnitsPerPixelY()
                    active_layer_info["width"] = rlayer.width()
                    active_layer_info["height"] = rlayer.height()
                    active_layer_info["bandCount"] = rlayer.bandCount()

        # 4. User Query 생성
        user_query = "현재 프로젝트, 프로젝트 내의 모든 레이어, 현재 선택된 레이어에 대한 정보를 먼저 알려줄게.\n"

        user_query += "======== Project Info ========\n"
        for key, value in project_info.items():
            user_query += f"  {key}: {value}\n"

        user_query += "\n======== Layers Info ========\n"
        for layer_info in layers_info:
            user_query += f"  Layer Name: {layer_info['name']}\n"
            for key, value in layer_info.items():
                if key != "name":
                    user_query += f"    {key}: {value}\n"
            user_query += "  ----------------------\n"

        user_query += "\n======== Active Layer Info ========\n"
        if active_layer_info:
            for key, value in active_layer_info.items():
                user_query += f"  {key}: {value}\n"
        else:
            user_query += "  No active layer selected.\n"

        user_query += "And the User's Request is : "
        user_query += self.ui.text_query.toPlainText().strip()
        user_query += "\n그리고, 항상 모든 명령에 '이 레이어' 나 '이 shp 파일' 처럼 이름을 명명하지 않는다면, activeLayer() 함수를 통해서 사용자의 말을 알아내. 모든 과정에서 새롭게 생성되는 모든 shp 파일 및 레이어는 사용자가 명명하지 않는 이상 모두 temp에 저장해. 그리고 코드를 작성할 때는 항상 견고하지만 이해하기 쉽게 작성하고, 가장 간단하게 목표를 이룰 수 있도록 작성해. 제일 중요한건, 각 코드에서 필요한 객체를 import 해야 한다면, 꼭 import 를 명시해줘. 주석은 절대로 달지마. 기본적으로 항상 새로운 레이어를 생성하여 작업해줘. 레이어를 합성하기 위해 'gdal:buildvirtualraster' 기능을 사용할 때는, 꼭!!!! 'PROJ_DIFFERENCE': True 코드를 써줘. 만약 래스터 계산을 한다고 할 때, 'native:rastercalculator'를 사용하지말고 'native:rastercalc' 이 기능을 꼭 써서 작성해줘 그리고 from qgis.core import *,from qgis.gui import *, from qgis.analysis import *, from qgis.processing import *, from qgis.utils import *,from PyQt5.QtCore import *, from PyQt5.QtGui import *,import processing 이 import 문들은 이미 입력되었으니까 쓰지마. 제일 중요한건 코드 외의 어떤 말도 필요없어. 주석 다 삭제해. 설명도 하지마."
        print(user_query)
        if not api_key:
            self.ui.text_response.setPlainText("API Key is missing!")
            self.ui.btn_ask.setEnabled(True)
            return
        if not user_query:
            self.ui.text_response.setPlainText("Query is empty!")
            self.ui.btn_ask.setEnabled(True)
            return
        self.loading = True
        self.loading_index = 0
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_loading_text)
        self.timer.start(300)
        self.worker = OpenAIWorker(api_key, user_query)
        self.worker.finished.connect(self.handle_response)
        self.worker.error.connect(self.handle_error)
        self.worker.start()
    def update_loading_text(self):
        if not self.loading:
            return
        loading_texts = ["Loading.", "Loading..", "Loading...", "Loading."]
        self.ui.text_response.setPlainText(loading_texts[self.loading_index])
        self.loading_index = (self.loading_index + 1) % len(loading_texts)
    def handle_response(self, response):
        self.timer.stop()
        self.loading = False
        self.ui.btn_ask.setEnabled(True)
        add_imports = "from qgis.core import *\nfrom qgis.gui import *\nfrom qgis.analysis import *\nfrom qgis.processing import *\nfrom qgis.utils import *\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nimport processing\n"
        response = add_imports + response
        self.ui.text_response.setPlainText(response)
        if self.ui.chk_ask_run.isChecked():
            self.run_response()
    def handle_error(self, error_message):
        self.timer.stop()
        self.loading = False
        self.ui.btn_ask.setEnabled(True)
        self.ui.text_response.setPlainText(f"Error: {error_message}")
    def run_response(self):
        self.ui.btn_run.setEnabled(False)
        response_code = self.ui.text_response.toPlainText().strip()
        if not response_code:
            self.ui.status_label.setText("Status: No code to execute.")
            self.ui.status_label.setStyleSheet("background-color: #FF3333; color: white;")
            self.ui.btn_run.setEnabled(True)
            return
        try:
            exec(response_code)
            self.ui.status_label.setText("Status: Code Execution Succeed.")
            self.ui.status_label.setStyleSheet("background-color: #66FF66; color: black;")
        except Exception as e:
            error_message = f"Something Wrong:\n{str(e)}"
            self.ui.status_label.setText(error_message)
            self.ui.status_label.setStyleSheet("background-color: #FF3333; color: white;")
        self.ui.btn_run.setEnabled(True)
